# Generated by Django 4.2.13 on 2024-05-29 17:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('songmanager', '0017_folder_smart_folder'),
    ]

    operations = [
        migrations.CreateModel(
            name='SmartPlaylistRules',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_modifier', models.CharField(choices=[('LESS_THAN', 'lt'), ('LESS_THAN_EQUAL_TO', 'lteq'), ('EQUAL_TO', 'eq'), ('GREATER_THAN_EQUAL_TO', 'gteq'), ('GREATER_THAN', 'gt')], max_length=30, null=True)),
                ('rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('rating_energy_join', models.CharField(choices=[('AND', 'and'), ('OR', 'or')], max_length=30, null=True)),
                ('energy_modifier', models.CharField(choices=[('LESS_THAN', 'lt'), ('LESS_THAN_EQUAL_TO', 'lteq'), ('EQUAL_TO', 'eq'), ('GREATER_THAN_EQUAL_TO', 'gteq'), ('GREATER_THAN', 'gt')], max_length=30, null=True)),
                ('energy', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100)], null=True)),
                ('genre_join', models.CharField(choices=[('AND', 'and'), ('OR', 'or')], max_length=30, null=True)),
                ('genre_contain_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('genre_options_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('atmosphere_join', models.CharField(choices=[('AND', 'and'), ('OR', 'or')], max_length=30, null=True)),
                ('atmosphere_contain_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('atmosphere_options_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('emotion_join', models.CharField(choices=[('AND', 'and'), ('OR', 'or')], max_length=30, null=True)),
                ('emotion_contain_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('emotion_options_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('tags_join', models.CharField(choices=[('AND', 'and'), ('OR', 'or')], max_length=30, null=True)),
                ('tags_contain_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('tags_options_choice', models.CharField(choices=[('CONTAINS', 'contains'), ('DOES_NOT_CONTAIN', 'dncontain')], max_length=30, null=True)),
                ('atmospheres', models.ManyToManyField(blank=True, to='songmanager.atmosphere')),
                ('emotions', models.ManyToManyField(blank=True, to='songmanager.emotion')),
                ('genres', models.ManyToManyField(to='songmanager.genre')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='songmanager.playlist')),
                ('tags', models.ManyToManyField(blank=True, to='songmanager.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='songmanager.user')),
            ],
        ),
    ]
